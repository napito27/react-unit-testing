REACT UNIT TESTING WORKSHEET  

Each assignment builds upon the last, gradually introducing more complex testing 
scenarios. This approach will help you understand not only the mechanics of testing with 
React Testing Library and userEvent but also the philosophy behind user-centric testing. 


Assignment 1: Install Dependencies and Setup 
• Objective: Set up a new React project, install React Testing Library, and get familiar 
with the basic testing structure. 
• Tasks: 
1. Create a new React app using Create React App. 
2. Install React Testing Library and its dependencies (@testing-library/react 
and @testing-library/user-event). 
3. Create a simple component (<Greeting />) that displays a "Hello, World!" 
message. 
4. Write a test that checks if "Hello, World!" is rendered on the screen. 


Assignment 2: Testing a Button Click 
• Objective: Learn to simulate user interactions with userEvent. 
• Tasks: 
1. Add a button to the <Greeting /> component that changes the message to 
"Hello, User!" when clicked. 
2. Write a test using userEvent to simulate clicking the button and then assert 
the message change. 


Assignment 3: Testing an Input Field 
• Objective: Understand how to test user input. 
• Tasks: 
1. Add an input field to <Greeting /> that allows users to type their name.  
2. Modify the greeting message to include the user's name from the input field 
when the button is clicked. 
3. Write a test using userEvent to type a name into the input field, click the 
greeting button, and assert the personalized greeting message.


Assignment 4: Testing Form Submission 
• Objective: Practice testing form submission behavior. 
• Tasks: 
1. Wrap the input field and button in a form element in <Greeting />. 
2. Modify the component to display the greeting message on form submission. 
3. Write a test that uses userEvent to simulate form submission and asserts 
the expected greeting message. 


Assignment 5: Testing Component Props 
• Objective: Learn to test components that receive props. 
• Tasks: 
1. Create a new component (<Farewell />) that accepts a name prop and 
displays "Goodbye, {name}!". 
2. Write a test that renders <Farewell /> with a specific name and asserts that 
the correct farewell message is displayed. 


Assignment 6: Testing Conditional Rendering 
• Objective: Get comfortable with testing components that conditionally render 
content. 
• Tasks: 
1. Modify <Greeting /> to display "Good morning" or "Good evening" based on a 
prop that indicates the time of day.   
2. Write tests for both conditions using userEvent to ensure the correct 
message is rendered. 


Assignment 7: Testing a List Component 
• Objective: Practice testing components that render lists. 
• Tasks: 
1. Create a <UserList /> component that takes an array of user names and 
renders a list. 
2. Write a test that renders <UserList /> with a set of names and asserts that all 
names are displayed in the list. 


Assignment 8: Testing Across Components 
• Objective: Master testing behavior that spans multiple components. 
• Tasks: 
1. Integrate <Greeting /> and <Farewell /> in an App component, allowing 
users to switch between greetings and farewells. 
2. Write tests that use userEvent to interact with the App component and 
assert the correct component behavior and output based on the 
interactions. 